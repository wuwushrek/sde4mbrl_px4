# Directory to the learned model parameters
learned_model_params: ~/Documents/sde4mbrl/sde4mbrlExamples/rotor_uav/iris_sitl/my_models/test_iris_sde.pkl
# trajectory_path: ~/Documents/sde4mbrl/sde4mbrlExamples/rotor_uav/iris_sitl/my_data/test_traj_gen.csv
input_constr:
  # pwm_1, pwm_2, pwm_3, pwm_4
  input_id: [0, 1, 2, 3]
  input_bound: [[0., 1.], [0.,1.], [0., 1.], [0., 1.]]

# Enforce the control inputs bound during learning value function
enforce_ubound: True


state_constr:
  # It represents the indexes of the constrained state variables
  state_id: [3, 4, 5, 10, 11, 12]
  # Penalty term for the slack variables
  state_penalty: [0.1, 0.1, 60.0, 0.1, 0.1, 0.1] # 0.1
  # slack constraints
  # Set of min max values for the slack id above
  state_bound: [[-0.3, 0.3], [-0.3, 0.3], [-0.3, 0.3], [-1.2, 1.2], [-1.2, 1.2], [-0.7, 0.7]] #.inf, -.inf
  # Enforce bound constraints via proximal ?
  # Doing so augment the number of variables of the problem by the number of
  # slack constraints
  slack_proximal: True


cost_params:
  uref: [0.71, 0.71, 0.71, 0.71]
  uerr: 5 # Motors penalization coefficient
  perr: [20.0, 20.0, 80.] # x, y, z, vx, vy, vz
  # perr_sig: [1.0, 1.0, 5.0]
  verr: [10, 10, 2.0]
  # verr_sig: [0.1, 0.1, 0.1]
  qerr: [2.0, 2.0, 30] # qx, qy, qz
  werr: [2.0, 2.0, 2.0]
  # werr: [500.0, 500.0, 100]
  # werr_sig: [0.1, 0.1, 0.1]


horizon: 20
num_short_dt: 20
short_step_dt: 0.05
# DANGEROUS: To use a time step different higher than the one used during training
long_step_dt: 0.05
discount: 1.0


# Number of particles when sampling the SDE
num_particles: 1

# Optimizer parameters
apg_mpc:
  # The intial step size in case no linsearh arguments are provided
  stepsize: 1.

  # The maximum number of gradient updates
  max_iter: 500
  max_no_improvement_iter: 500

  # The adaptive coefficient to scale the momentum. nill values mean
  # that it is not used and rather beta_k = k /(k+3) is used as classical acceleration momentum
  # This value should be between 0 and 1
  moment_scale: null

  # The initial momentum.
  beta_init: 0.25

  # # The stoppng criteria of the algorithm based on gradient norm
  atol: 1.0e-8 # The minimum cost difference or 'zero' cost value
  rtol: 1.0e-6

  linesearch:
    max_stepsize: 0.01 # The maximum admissible step size
    coef: 0.1 # The agressiveness coefficient. The smaller the larger step size in the optimization
    decrease_factor: 0.7 # The decrease factor when performing the armijo linesearch
    increase_factor: 1.5 # The increase factor at each new gradient descent iteration
    # # The reset strategy at each iteration
    # # "conservative": re-use previous stepsize, producing a non increasing sequence of stepsizes. Slow convergence.
    # # "increase": attempt to re-use previous stepsize multiplied by increase_factor. Cheap and efficient heuristic.
    reset_option: increase # or conservative
    maxls: 10 # Maximum number of iterations during the line search


# sim_scen:
#   t_init: 0.0
#   # ['x', 'y', 'z', 'vx', 'vy', 'vz', 'roll', 'pitch', 'yaw', 'wx', 'wy', 'wz']
#   pos_init: [0.,  0.,   1.0,  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]
#   # init_std: [0.1, 0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.2,  0.01, 0.01, 0.01]
#   init_std: [0.0, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 0.0, 0.0]
#   # Target position when no trajectories are given: x, y, z, yaw
#   pos_goal: [0.0, 0.0, 1.0, 0.0]
#   # Noise on the goal pos standard deviation from the initial state x, y, z, yaw
#   pos_goal_std: [0.001, 0.001, 0.001, 0.001]
#   num_steps: 2000 # This is not used when trajectory are used
